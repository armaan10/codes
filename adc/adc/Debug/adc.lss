
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005bf  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000544  00000000  00000000  0000074f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001b4  00000000  00000000  00000c93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000e48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ee  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  0000117a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000011b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__vector_14>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include<avr/interrupt.h>
#include<util/delay.h>
int main(void)

{TCCR0=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);
  6c:	89 e6       	ldi	r24, 0x69	; 105
  6e:	83 bf       	out	0x33, r24	; 51
	
	
		DDRB|=1<<PINB3;
  70:	bb 9a       	sbi	0x17, 3	; 23
	PORTB|=1<<PINB3;
  72:	c3 9a       	sbi	0x18, 3	; 24
	ADCSRA|=1<<ADIE;//turn on interrupt
  74:	33 9a       	sbi	0x06, 3	; 6
	ADCSRA|=1<<ADPS2;//prescale (
  76:	32 9a       	sbi	0x06, 2	; 6
	ADMUX &= ~(1<<MUX0);
  78:	38 98       	cbi	0x07, 0	; 7
	ADMUX|=1<<REFS0;//set ref voltage
  7a:	3e 9a       	sbi	0x07, 6	; 7
ADCSRA|=1<<ADEN;//enable
  7c:	37 9a       	sbi	0x06, 7	; 6
ADMUX|=1<<ADLAR;//using 8 bits
  7e:	3d 9a       	sbi	0x07, 5	; 7

sei();
  80:	78 94       	sei

ADCSRA|=1<<ADSC;//start conversion 	
  82:	36 9a       	sbi	0x06, 6	; 6
  84:	ff cf       	rjmp	.-2      	; 0x84 <main+0x18>

00000086 <__vector_14>:
    }


}
ISR(ADC_vect)
{
  86:	1f 92       	push	r1
  88:	0f 92       	push	r0
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	0f 92       	push	r0
  8e:	11 24       	eor	r1, r1
  90:	8f 93       	push	r24
	
	//PORTB^=1<<PINB3;
	//int lowip=ADCL;
	OCR0=ADCH;
  92:	85 b1       	in	r24, 0x05	; 5
  94:	8c bf       	out	0x3c, r24	; 60

		ADCSRA|=1<<ADSC;//start next conversion
  96:	36 9a       	sbi	0x06, 6	; 6
	




}
  98:	8f 91       	pop	r24
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
