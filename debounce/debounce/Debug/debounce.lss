
debounce.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000106  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000664  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005be  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000250  00000000  00000000  00000db6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001008  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000346  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a0  00000000  00000000  00001372  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001412  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/delay.h>

int main(void)
{//b3 output
    /* Replace with your application code */
    DDRD&=~(1<<PIND7);
  6c:	8f 98       	cbi	0x11, 7	; 17
	PORTD|=1<<PIND7;
  6e:	97 9a       	sbi	0x12, 7	; 18
	DDRB|=1<<PINB3;
  70:	bb 9a       	sbi	0x17, 3	; 23
	PORTB|=1<<PINB3;
  72:	c3 9a       	sbi	0x18, 3	; 24
	bool curr=1,last=1;
  74:	91 e0       	ldi	r25, 0x01	; 1
		}
		curr=(PIND & 1<<PIND7)>>PIND7;
		
		if(curr==0 && last ==1)
		{
			PORTB^=1<<PINB3;
  76:	38 e0       	ldi	r19, 0x08	; 8
  78:	01 c0       	rjmp	.+2      	; 0x7c <main+0x10>

#include <avr/io.h>
#include<avr/delay.h>

int main(void)
{//b3 output
  7a:	92 2f       	mov	r25, r18
	PORTB|=1<<PINB3;
	bool curr=1,last=1;
	
	while (1) 
    {
		curr=(PORTD & 1<<PORTD7)>>PORTD7;
  7c:	82 b3       	in	r24, 0x12	; 18
		if(curr!=last)
  7e:	88 1f       	adc	r24, r24
  80:	88 27       	eor	r24, r24
  82:	88 1f       	adc	r24, r24
  84:	98 17       	cp	r25, r24
  86:	31 f0       	breq	.+12     	; 0x94 <main+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	e3 ec       	ldi	r30, 0xC3	; 195
  8a:	f9 e0       	ldi	r31, 0x09	; 9
  8c:	31 97       	sbiw	r30, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <main+0x20>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x26>
  92:	00 00       	nop
		{
			
			_delay_ms(10);
		}
		curr=(PIND & 1<<PIND7)>>PIND7;
  94:	80 b3       	in	r24, 0x10	; 16
  96:	28 2f       	mov	r18, r24
  98:	22 1f       	adc	r18, r18
  9a:	22 27       	eor	r18, r18
  9c:	22 1f       	adc	r18, r18
		
		if(curr==0 && last ==1)
  9e:	88 23       	and	r24, r24
  a0:	64 f3       	brlt	.-40     	; 0x7a <main+0xe>
  a2:	99 23       	and	r25, r25
  a4:	51 f3       	breq	.-44     	; 0x7a <main+0xe>
		{
			PORTB^=1<<PINB3;
  a6:	88 b3       	in	r24, 0x18	; 24
  a8:	83 27       	eor	r24, r19
  aa:	88 bb       	out	0x18, r24	; 24
  ac:	e6 cf       	rjmp	.-52     	; 0x7a <main+0xe>

000000ae <_exit>:
  ae:	f8 94       	cli

000000b0 <__stop_program>:
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <__stop_program>
